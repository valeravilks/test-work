//////////////////////////////////////////////////
//                                              //
//  Base                                        //
//  https://www.dreamersofday.co                 //
//                                              //
//////////////////////////////////////////////////
/**
 * Here we provide very basic styling that most UI's will need. These styles
 * are applied at the most global level being applied via element selectors,
 * except for "Headings" which are scoped to classes (see that section for the
 * info).
 *
 * Everything in Base needs to be easily overridden which is really easy to do
 * as everything in Base sits right at the bottom in terms of specificity.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Root element
 * 2. Links
 * 3. Images
 * 4. Forms
 * 5. Print
 */

////////////////////////////////////
// 1. Root Element
////////////////////////////////////
html {
	font-family: $g-body-font-family;
	font-size: $g-body-font-size;
	font-weight: $g-body-font-weight;
	font-style: normal;
	line-height: $g-body-line-height;
	color: $g-body-dark;
	-webkit-font-smoothing: antialiased; //-moz-osx-font-smoothing: grayscale; // todo: uncomment? @Musa
	text-rendering: optimizeLegibility;
}

////////////////////////////////////
// 2. Links
////////////////////////////////////
a {
	-webkit-tap-highlight-color: transparent;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	text-decoration: none;
	transition: $g-trans-base;

	&:hover {
		color: $g-brand-color-1;
	}
}

////////////////////////////////////
// 3. Images
////////////////////////////////////
/**
 * 1. `[alt]` text is visually offset if images don't load.
 * 2. Make responsive, i.e. keep images from scaling beyond the width of their
 *    parents.
 * 3. Several classes for aligning images and block elements (div, p, table etc.) were introduced in WordPress 2.5: aligncenter, alignleft and alignright. In addition the class alignnone is added to images that are not aligned, so they can be styled differently if needed.
 *    The same classes are used to align images that have a caption (as of WordPress 2.6). Three additional CSS classes are needed for the captions, and one more for accessibility. Together, the classes are:

 */

img {
	font-style: italic; // [1]
	height: auto; // [2]
	max-width: 100%; // [2]
	&.alignnone {
		margin: 0 $g-space $g-space 0; // [3]
	}
	&.alignright {
		float: right; // [3]
		margin: 0 0 $g-space $g-space; // [3]
	}
	&.alignleft {
		float: left; // [3]
		margin: 0 $g-space $g-space 0; // [3]
	}
	&.aligncenter {
		margin: 0 auto $g-space; // [3]
		display: block; // [3]
	}
	@include bpm-sm {
		&.alignright,
		&.alignleft {
			float: none; // [3]
			margin: 0 $g-space $g-space 0; // [3]g-
		}
	}
}

////////////////////////////////////
// X. Lists
////////////////////////////////////

ul {
    list-style-type: disc;
    list-style-position: inside;
}

li {
    margin-left: 20px;
    padding-left: 10px;
    list-style-position: outside;
}

ol {
    list-style-type: decimal;
    list-style-position: inside;
    margin-bottom: 20px;
}

ul ul,
ol ul {
    list-style-type: circle;
    list-style-position: inside;
}
ol ol,
ul ol {
    list-style-type: lower-latin;
    list-style-position: inside;
}

////////////////////////////////////
// 4. Paragraphs
////////////////////////////////////
/**
 * Apply an optional bottom margin to all paragraphs.
 */

// @if $shell-base-apply-bottom-margin-to-paragraphs {
//     p:not(:last-child) {
//         margin-bottom: rem($shell-g-spacing);
//     }
// }
// Paragraph
p {
	color: inherit;
	margin: 0;
}

p {
	margin: 0 0 $g-space;
}

//p:not(:last-child) {
//	margin: 0 0 $g-space;
//}

///////////////////////
// 4. Forms          //
///////////////////////
// 1. Global Resents
input,
textarea,
select,
option,
optgroup,
button,
legend,
fieldset {
	outline: none;
	font-family: $form-font-family;
	font-size: $form-font-size;
	color: $form-color;
	vertical-align: top;
	display: block;
	transition: $g-trans-base;
}

button {
	-webkit-tap-highlight-color: transparent;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

label {
	display: block;
	width: $form-input-width; // max-width: $form-input-max-width;
}

// 2. Input and Textarea
/* Fields with standard width */

input[type='text'],
input[type='email'],
input[type='password'],
input[type='search'],
input[type='color'],
input[type='date'],
input[type='datetime-local'],
input[type='month'],
input[type='number'],
input[type='tel'],
input[type='time'],
input[type='url'],
input[type='week'],
input[list],
input[type='file'],
select,
textarea {
	width: $form-input-width;
	padding: 12px;
	background-color: $form-input-bg-color;
	border: 1px solid #000;
	border-radius: $form-border-radius;
	margin-bottom: 5px;
	font-size: 14px;
	font-weight: 300;
	font-style: normal;
	letter-spacing: -0.31px;
	line-height: normal;

	&::placeholder {
		font-size: 14px;
		font-weight: 300;
		font-style: normal;
		letter-spacing: -0.31px;
		opacity: 1;
		color: $g-body-dark;
	}

	&::-webkit-input-placeholder {
		font-size: 14px;
		font-weight: 300;
		font-style: normal;
		letter-spacing: -0.31px;
		opacity: 1;
		color: $g-body-dark;
	}

	&::-moz-placeholder {
		font-size: 14px;
		font-weight: 300;
		font-style: normal;
		letter-spacing: -0.31px;
		opacity: 1;
		color: $g-body-dark;
	}

	&:-ms-input-placeholder {
		font-size: 14px;
		font-weight: 300;
		font-style: normal;
		letter-spacing: -0.31px;
		opacity: 1;
		color: $g-body-dark;
	}

	&:-moz-placeholder {
		font-size: 14px;
		font-weight: 300;
		font-style: normal;
		letter-spacing: -0.31px;
		opacity: 1;
		color: $g-body-dark;
	}
}

/* Fields with standard height */

input[type='text'],
input[type='email'],
input[type='password'],
input[type='search'],
input[type='color'],
input[type='date'],
input[type='datetime-local'],
input[type='month'],
input[type='number'],
input[type='tel'],
input[type='time'],
input[type='url'],
input[type='week'],
input[list] {
	height: $form-input-height;
	-webkit-appearance: none;
}

/* Other */

textarea {
	-webkit-appearance: none;
	resize: none;
	max-height: $form-textarea-max-height;
}

input[type='range'] {
	height: $form-input-height;
	width: $form-input-width; // max-width: $form-input-max-width;
}

input[type='search'] {
	height: $form-input-height;
	-webkit-appearance: none;
}

input[type='search']::-webkit-search-cancel-button,
input[type='search']::-webkit-search-decoration {
	-webkit-appearance: none;
}

input[type='checkbox'],
input[type='radio'] {
	display: inline-block;
	vertical-align: middle;
}

// 3. Select Fields
select {
	height: $form-input-height;
}

// 4. States
input[disabled],
textarea[disabled],
select[disabled],
option[disabled],
button[disabled] {
	color: $g-body-light;
	cursor: not-allowed;
	opacity: .7;
}

input:focus,
textarea:focus,
select:focus,
option:focus {
	border-color: $form-focus-border-color;
	outline: none;
}

////////////////////////////////////
// 5. Print
////////////////////////////////////
/**
 * N.B. it is okay to use `!important` here as we're doing it pre-emptively
 * i.e. you know you will always want the rule it's applied too to take
 * precedence.
 */

@media print {
	/**
	 * Global.
	 */
	/* stylelint-disable selector-no-universal */
	*,
	*::after,
	*::before,
	/* stylelint-enable */
	// First letter
	blockquote::first-letter,
	div::first-letter,
	li::first-letter,
	p::first-letter, // First line
	blockquote::first-line,
	div::first-line,
	li::first-line,
	p::first-line {
		background: transparent !important;
		box-shadow: none !important;
		color: #000;
		text-shadow: none !important;
	}
	/**
	 * Hide elements not really useful on a piece of paper.
	 */
	audio,
	nav,
	video {
		display: none !important;
	}
	/**
	 * Ensure all images are responsive.
	 */
	img {
		height: auto !important;
		max-width: 100% !important;
	}
	/**
	 * Make links always stand out.
	 */
	a,
	a:visited {
		border-bottom: 0 !important;
		text-decoration: underline !important;
	}
	/**
	 * Show the `[href]` and `[title]` attribute values of links and
	 * abbreviations via their `::after` pseudo element.
	 */
	a[href]::after {
		content: ' (' attr(href) ')';
	}
	abbr[title]::after {
		content: ' (' attr(title) ')';
	}
	/**
	 * Don't show links that are fragment identifiers, or use the
	 * `javascript:` pseudo protocol.
	 */
	a[href^='javascript:']::after,
	a[href^='#']::after {
		content: '';
	}
	/**
	 * Make the header row repeated at the top of each printed page, see:
	 * http://css-discuss.incutio.com/wiki/Printing_Tables
	 */
	thead {
		display: table !important;
	}
	/**
	 * Better formatted `<pre>`s.
	 */
	pre {
		white-space: pre-wrap !important;
	}
	/**
	 * Page breaks.
	 */
	h2,
	h3 {
		page-break-after: avoid;
	}
	blockquote,
	dl,
	img,
	ol,
	pre,
	tr,
	ul {
		page-break-inside: avoid;
	}
	/**
	 * Orphans and widows.
	 */
	h2,
	h3,
	p {
		orphans: 3;
		widows: 3;
	}
	/**
	 * Apply bottom margin to all paragraphs.
	 */
	p:not(:last-child) {
		margin-bottom: 15px;
	}
}

////////////////////////////////////
// 5. Blockquote
////////////////////////////////////
blockquote {
	position: relative;
	margin-bottom: 30px;
	padding: 25px 35px;
	border-left: 5px solid $g-brand-color-1;
	quotes: none;

	p {
		font-size: 25px;

		&:last-child {
			margin-bottom: 0;
		}
	}
}
