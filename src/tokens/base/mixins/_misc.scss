///////////////////
// Placeholder   //
///////////////////

@mixin input-placeholder {
	&.placeholder {
		@content;
	}

	&:-moz-placeholder {
		@content;
	}

	&::-moz-placeholder {
		@content;
	}

	&:-ms-input-placeholder {
		@content;
	}

	&::-webkit-input-placeholder {
		@content;
	}
}

/////////////
// Lists   //
/////////////

// Used to override list styles
@mixin list-bare {
	list-style-type: none;
	margin: 0;
	padding: 0;
}

/////////////////////////
// Wordpress Special   //
/////////////////////////

@mixin adminbar {
	.admin-bar & {
		@content;
	}
}

///////////////////////////
// Truncate Text        //
/////////////////////////

@mixin truncateText($overflow: ellipsis) {
	overflow: hidden;
	white-space: nowrap;
	text-overflow: $overflow;
}

@mixin ellipsis($max-width) {
	display: inline-block;
	max-width: $max-width;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

//////////////////////
// Removing Margins //
//////////////////////

@mixin last-p-no-bm {
	p:last-child {
		margin-bottom: 0;
	}
}

@mixin last-child-no-bm {
	& > :last-child {
		margin-bottom: 0;
	}
}

@mixin last-element-no-bm {
	*:last-child {
		margin-bottom: 0;
	}
}

/////////////////////
// Box mixin      //
///////////////////

@mixin box($width, $height: $width) {
	width: $width;
	height: $height;
}

/////////////////////
// Triangle mixin //
///////////////////

/*   ///////////
 *  // Usage //
 * ///////////
 *
 *  .arrow-up-left {
 *      @include triangle(32px 24px, $blue, up-left);
 *  }
 *
*/

@mixin triangle ($size, $color, $direction) {
	height: 0;
	width: 0;

	$width: nth($size, 1);
	$height: nth($size, length($size));

	$foreground-color: nth($color, 1);
	$background-color: if(length($color) == 2, nth($color, 2), transparent);

	@if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {

		$width: $width / 2;
		$height: if(length($size) > 1, $height, $height/2);

		@if $direction == up {
			border-bottom: $height solid $foreground-color;
			border-left: $width solid $background-color;
			border-right: $width solid $background-color;

		} @else if $direction == right {
			border-bottom: $width solid $background-color;
			border-left: $height solid $foreground-color;
			border-top: $width solid $background-color;

		} @else if $direction == down {
			border-left: $width solid $background-color;
			border-right: $width solid $background-color;
			border-top: $height solid $foreground-color;

		} @else if $direction == left {
			border-bottom: $width solid $background-color;
			border-right: $height solid $foreground-color;
			border-top: $width solid $background-color;
		}
	}

	@else if ($direction == up-right) or ($direction == up-left) {
		border-top: $height solid $foreground-color;

		@if $direction == up-right {
			border-left:  $width solid $background-color;

		} @else if $direction == up-left {
			border-right: $width solid $background-color;
		}
	}

	@else if ($direction == down-right) or ($direction == down-left) {
		border-bottom: $height solid $foreground-color;

		@if $direction == down-right {
			border-left:  $width solid $background-color;

		} @else if $direction == down-left {
			border-right: $width solid $background-color;
		}
	}

	@else if ($direction == inset-up) {
		border-color: $background-color $background-color $foreground-color;
		border-style: solid;
		border-width: $height $width;
	}

	@else if ($direction == inset-down) {
		border-color: $foreground-color $background-color $background-color;
		border-style: solid;
		border-width: $height $width;
	}

	@else if ($direction == inset-right) {
		border-color: $background-color $background-color $background-color $foreground-color;
		border-style: solid;
		border-width: $width $height;
	}

	@else if ($direction == inset-left) {
		border-color: $background-color $foreground-color $background-color $background-color;
		border-style: solid;
		border-width: $width $height;
	}
}

////////////////////////////////////////////////////////////////
// Viewport sized typography with minimum and maximum values //
//////////////////////////////////////////////////////////////

/*
 *  $responsive  - Viewport-based size
 *  $min         - Minimum font size (px)
 *  $max         - Maximum font size (px) (optional)
 *  $fallback    - Fallback for viewport-based units (optional)
 *
 *  @example tokens - 5vw font size (with 50px fallback),
 *                  minimum of 35px and maximum of 150px
 *  @include responsive-font(5vw, 35px, 150px, 50px);
 *
*/

@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
	$responsive-unitless: $responsive / ($responsive - $responsive + 1);
	$dimension: if(unit($responsive) == 'vh', 'height', 'width');
	$min-breakpoint: $min / $responsive-unitless * 100;

	@media (max-#{$dimension}: #{$min-breakpoint}) {
		font-size: $min;
	}

	@if $max {
		$max-breakpoint: $max / $responsive-unitless * 100;

		@media (min-#{$dimension}: #{$max-breakpoint}) {
			font-size: $max;
		}
	}

	@if $fallback {
		font-size: $fallback;
	}

	font-size: $responsive;
}

////////////////////////////////////////////////////////////////////
// Retina images.                                                //
// Add high resolution images, with a fallback for devices that //
// aren't displaying high resolution images.                   //
////////////////////////////////////////////////////////////////

/*   ///////////
 *  // Usage //
 * ///////////
 *
 *  div.logo {
 *     background: url("logo.png") no-repeat;
 *     @include image-2x("logo2x.png", 100px, 25px);
 *  }
 *
*/

@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
	(-o-min-device-pixel-ratio: 2.6/2),
	(-webkit-min-device-pixel-ratio: 1.3),
	(min-device-pixel-ratio: 1.3),
	(min-resolution: 1.3dppx) {
		background-image: url($image);
		background-size: $width $height;
	}
}
