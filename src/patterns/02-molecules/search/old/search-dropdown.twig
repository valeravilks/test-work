
{% block content %}
    {% verbatim %}

<script type="text/html" id="tmpl-autocomplete-header">
  <div class="autocomplete-header">
  <div class="autocomplete-header-title">{{{ data.label }}}</div>
  <div class="clear"></div>
  </div>
</script>

<script type="text/html" id="tmpl-autocomplete-post-suggestion">
  <a class="suggestion-link" href="{{ data.permalink }}" title="{{ data.post_title }}">
  <# if ( data.images.thumbnail ) { #>
    <img class="suggestion-post-thumbnail" src="{{ data.images.thumbnail.url }}" alt="{{ data.post_title }}">
    <# } #>
    <div class="suggestion-post-attributes">
      <span class="suggestion-post-title">{{{ data._highlightResult.post_title.value }}}</span>
      <# if ( data._snippetResult['content'] ) { #>
      <span class="suggestion-post-content">{{{ data._snippetResult['content'].value }}}</span>
      <# } #>
    </div>
  </a>
</script>

<script type="text/html" id="tmpl-autocomplete-term-suggestion">
  <a class="suggestion-link" href="{{ data.permalink }}" title="{{ data.name }}">
  <svg viewBox="0 0 21 21" width="21" height="21">
    <svg width="21" height="21" viewBox="0 0 21 21">
    <path
      d="M4.662 8.72l-1.23 1.23c-.682.682-.68 1.792.004 2.477l5.135 5.135c.7.693 1.8.688 2.48.005l1.23-1.23 5.35-5.346c.31-.31.54-.92.51-1.36l-.32-4.29c-.09-1.09-1.05-2.06-2.15-2.14l-4.3-.33c-.43-.03-1.05.2-1.36.51l-.79.8-2.27 2.28-2.28 2.27zm9.826-.98c.69 0 1.25-.56 1.25-1.25s-.56-1.25-1.25-1.25-1.25.56-1.25 1.25.56 1.25 1.25 1.25z"
      fill-rule="evenodd"></path>
    </svg>
  </svg>
  <span class="suggestion-post-title">{{{ data._highlightResult.name.value }}}</span>
  </a>
</script>

<script type="text/html" id="tmpl-autocomplete-user-suggestion">
  <a class="suggestion-link user-suggestion-link" href="{{ data.posts_url }}" title="{{ data.display_name }}">
  <# if ( data.avatar_url ) { #>
    <img class="suggestion-user-thumbnail" src="{{ data.avatar_url }}" alt="{{ data.display_name }}">
    <# } #>

    <span class="suggestion-post-title">{{{ data._highlightResult.display_name.value }}}</span>
  </a>
</script>

<script type="text/html" id="tmpl-autocomplete-empty">
  <div class="autocomplete-empty">
    <?php esc_html_e( 'No results matched your query ', 'algolia' ); ?>
  <span class="empty-query">"{{ data.query }}"</span>
  </div>
</script>

<script type="text/javascript">
  jQuery(function () {
  /* init Algolia custom-specific */
  var client = algoliasearch(algolia.application_id, algolia.search_api_key);

  /* setup default sources */
  var sources = [];
  jQuery.each(algolia.autocomplete.sources, function (i, config) {
    var suggestion_template = wp.template(config['tmpl_suggestion']);
    sources.push({
    source: algoliaAutocomplete.sources.hits(client.initIndex(config['index_name']), {
      hitsPerPage: config['max_suggestions'],
      attributesToSnippet: [
      'content:10'
      ],
      highlightPreTag: '__ais-highlight__',
      highlightPostTag: '__/ais-highlight__'
    }),
    templates: {
      header: function () {
      return wp.template('autocomplete-header')({
        label: _.escape(config['label'])
      });
      },
      suggestion: function (hit) {
      if(hit.escaped === true) {
        return suggestion_template(hit);
      }
      hit.escaped = true;

      for (var key in hit._highlightResult) {
        /* We do not deal with arrays. */
        if (typeof hit._highlightResult[key].value !== 'string') {
        continue;
        }
        hit._highlightResult[key].value = _.escape(hit._highlightResult[key].value);
        hit._highlightResult[key].value = hit._highlightResult[key].value.replace(/__ais-highlight__/g, '<em>').replace(/__\/ais-highlight__/g, '</em>');
      }

      for (var key in hit._snippetResult) {
        /* We do not deal with arrays. */
        if (typeof hit._snippetResult[key].value !== 'string') {
        continue;
        }

        hit._snippetResult[key].value = _.escape(hit._snippetResult[key].value);
        hit._snippetResult[key].value = hit._snippetResult[key].value.replace(/__ais-highlight__/g, '<em>').replace(/__\/ais-highlight__/g, '</em>');
      }

      return suggestion_template(hit);
      }
    }
    });

  });

  /* Setup dropdown menus */
  jQuery(algolia.autocomplete.input_selector).each(function (i) {
    var $searchInput = jQuery(this);

    var config = {
    debug: algolia.debug,
    hint: false,
    openOnFocus: true,
    appendTo: '#search',
    templates: {
      empty: wp.template('autocomplete-empty')
    }
    };



    if (algolia.powered_by_enabled) {
    config.templates.footer = wp.template('autocomplete-footer');
    }

    /* Instantiate autocomplete.js */
    var autocomplete = algoliaAutocomplete($searchInput[0], config, sources).on('autocomplete:selected', function (e, suggestion) {
      /* Redirect the user when we detect a suggestion selection. */
      window.location.href = suggestion.permalink;
      jQuery('.input.search').addClass('active');
    });

    jQuery(window).scroll(function(){
      autocomplete.autocomplete.close();
    });

    jQuery(document).on('mousedown', function (e) {
      if (jQuery(e.target).closest(".algolia-autocomplete").length === 0) {
        autocomplete.autocomplete.close();
      }
    });

    /* Force the dropdown to be re-drawn on scroll to handle fixed containers. */
    jQuery(window).scroll(function() {
    if(autocomplete.autocomplete.getWrapper().style.display === "block") {
      autocomplete.autocomplete.close();
      autocomplete.autocomplete.open();
    }
    });
  });

  jQuery(document).on("click", ".algolia-powered-by-link", function (e) {
    e.preventDefault();
    window.location = "https://www.algolia.com/?utm_source=WordPress&utm_medium=extension&utm_content=" + window.location.hostname + "&utm_campaign=poweredby";
  });
  });
</script>


{% endverbatim %}

{% endblock %}


// by third essential ajax code
{% spaceless %}
  {% set component_class = 'c-search-dropdown' %}

  {% include '01-atoms/search-toolbar/search-toolbar.twig' with {
      parent_class : component_class
  } %}
  <section class="l-site {{ component_class }}">
			<div class="l-container">
        {% if posts is empty %}
          {% if post.search_keyword is empty %}
            {% set notFoundText = "Please enter a search query" %}
            {% set typedKeyword = "" %}
          {% else %}
            {% set notFoundText = "Sorry, we couldn&#39;t find any result matching: " %}
            {% set typedKeyword = '&#34;' ~ post.search_keyword ~ '&#34;' %}
          {% endif %}
					<div class="{{ component_class }}__not-found-wrapper">
            <span class="{{ component_class }}__not-found-default-txt">
             {{ content }}
						</span>
						<div class="{{ component_class }}__not-found-search-keyword">
              <h5 class="{{component_class}}__result-title">Popular content</h5>
              <div class="{{component_class}}__suggestions">
                <ul  class="{{component_class}}__suggestion-list">

                    {% for item in popular_content %}
                        <li class="{{component_class}}__suggestion-list-item">
                            <a class="{{component_class}}__suggestion_link" href="{{item.link.url}}">
                                {{item.link.title}}
                            </a>
                        </li>
                    {% endfor %}
                </ul>
              </div>
              <a href="{{ options.link.url }}" class="{{component_class}}__link">{{ link.url.title }}</a>
            </div>
          </div>
          <a class="{{component_class}}__back-link" href="{{link.url}}">{{link.title}}</a>
        {% else %}
					<div class="{{ component_class }}__search-items-wrapper">
            {% if posts %}
              {% for post in posts %}
                {#  for category #}
                {% set testcategory = [] %}
                {% for post_category in post.terms('category') %}
                    {% set testcategory = testcategory|merge([post_category.slug]) %}
                {% endfor %}

                {#  for tags #}
                {% set test_tag = [] %}
                {% for post_tags in post.terms('tags') %}
                  {% set test_tag = test_tag|merge([post_tags.slug]) %}
                {% endfor %}
                {% set image = TimberImage(post.hero_image) %}
                {% include '02-molecules/cards/search-item/search-item.twig' with {
                  parent_class        : component_class,
                  title               : post.title,
                  link                : post.link,
                  date                : post.date | date("M j, Y"),
                  content             : post.content | excerpt(20),
                  image               : image,
                  resize_number       : 560,
                  author              : post.author.first_name ~ ' '  ~ post.author.last_name,
                  link_text           : 'Read More',
                  component_animation : 'wow fadeInUp _' ~ loop.index,
                  mix 				: "mix",
                  mix1 				: post.post_type,
                  mix2 				: testcategory | join(' '),
                  mix3 				: test_tag | join(' ')
                } only %}
              {% endfor %}
            {% endif %}
					</div>
        {% endif %}
			</div>
		</section>
{% endspaceless %}
